package watermark;/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import Jama.Matrix;
import Jama.SingularValueDecomposition;
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import static java.lang.Math.log10;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.activation.MimetypesFileTypeMap;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Kush
 */
public class embed extends javax.swing.JFrame {
    double hostgray[][];
    double hostgrayoriginal[][];
    double watermarkgray[][];
    double hostred[][];
    double hostgreen[][];
    double hostblue[][];
    double host[][];
    double watermark[][];
    double watermarkred[][];
    double watermarkgreen[][];
    double watermarkblue[][];
    File hostimage;
    File watermarkimage;
    double alpha=0.1;
    long startTime;
    /**
     * Creates new form embed
     */
    public embed() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText(" Host Image");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText(" Watermark Image");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Embed and Save");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Back");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel1.setText("...");

        jLabel2.setText("...");

        jLabel4.setText("<-");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(319, 319, 319)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(311, 311, 311)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(362, 362, 362)
                                .addComponent(jButton4))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(331, 331, 331)
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 11, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel1))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jLabel2))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(31, 31, 31)
                .addComponent(jButton4)
                .addContainerGap(65, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       JFileChooser chooser=new JFileChooser();
       chooser.showOpenDialog(null);
        hostimage=chooser.getSelectedFile();
        String hostname= hostimage.getAbsolutePath();
        String mimetype= new MimetypesFileTypeMap().getContentType(hostimage);
        String type = mimetype.split("/")[0];
        if(type.equals("image"))
        {System.out.println("It's an image");
            jLabel1.setText(hostname);}
        else 
        {jLabel1.setText("Invalid file format");
        JOptionPane.showMessageDialog(null,"Please select an image file for host");
        } 
       //jLabel1.setText("...");
        
        
// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       JFileChooser chooser1=new JFileChooser();
       chooser1.showOpenDialog(null);
        watermarkimage=chooser1.getSelectedFile();
       String watermarkname= watermarkimage.getAbsolutePath();
       String mimetype= new MimetypesFileTypeMap().getContentType(watermarkimage);
        String type = mimetype.split("/")[0];
        if(type.equals("image"))
        {System.out.println("It's an image");
            jLabel2.setText(watermarkname);}
        else 
        {jLabel2.setText("Invalid file format");
        JOptionPane.showMessageDialog(null,"Please select an image file for watermark");
        } 
        //jLabel2.setText("...");
       // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
             startTime = System.nanoTime();

            jLabel3.setText("Embedding. Please wait");
        embedding();
        
        
           jLabel3.setText("Done"); 
// TODO add your handling code here:
        } catch (IOException ex) {
            Logger.getLogger(embed.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.dispose();
// TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(embed.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(embed.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(embed.class.getName()).log(Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            Logger.getLogger(embed.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new embed().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables

    private void embedding() throws IOException {
        
        //reading watermarkimage
        BufferedImage watermarksample=ImageIO.read(watermarkimage);
        String watername=watermarkimage.getName();
        //separating r,g and b bands
         //watermarkred=getRed(watermarksample);
        //watermarkgreen=getGreen(watermarksample);
        //watermarkblue=getBlue(watermarksample);
        watermarkgray=makeGray(watermarksample);
      
       // for holding one half of watermark. The other will be held in the original
        
//       double watermarkred1[][]=new double[watermarkred.length][watermarkred[0].length];
   //    double watermarkgreen1[][]=new double[watermarkgreen.length][watermarkgreen[0].length];
     //  double watermarkblue1[][]=new double[watermarkgreen.length][watermarkgreen[0].length];
     //  double watermarkgray1[][]=new double[watermarkgray.length][watermarkgray[0].length];
       
       
       
         
        //host
         BufferedImage cover=ImageIO.read(hostimage);
         String hostname=hostimage.getName();
         System.out.println("Embedding "+watername+" into "+hostname);
         wavelet dwt=new wavelet();
         dct dctt=new dct();
         hostgrayoriginal=makeGray(cover);
         
         hostgray=dwt.forwardwavlet(hostgrayoriginal);
         watermarkgray=dwt.forwardwavlet(watermarkgray);
         
            matrixopn obj=new matrixopn();
        double[][] hHL = obj.getHL(hostgray);
        double[][] hLH = obj.getLH(hostgray);
        double[][] hLL = obj.getLL(hostgray);
        double[][] hHH = obj.getHH(hostgray);
        //double[][] hlltemp=hLL;
        
        
                    double [][]hostHL=dct.DCT2(hHL);
                    double [][]hostHH=dct.DCT2(hHH);
                    double [][]hostLH=dct.DCT2(hLH);
                    double [][]hostLL=dct.DCT2(hLL);
        
                    
        double[][] wHL = obj.getHL(watermarkgray);
        double[][] wLH = obj.getLH(watermarkgray);
        double[][] wLL = obj.getLL(watermarkgray);
        double[][] wHH = obj.getHH(watermarkgray);
        
           
                    double [][]waterHL=dct.DCT2(wHL);
                    double [][]waterHH=dct.DCT2(wHH);
                    double [][]waterLH=dct.DCT2(wLH);
                    double [][]waterLL=dct.DCT2(wLL);
                    
                      
                    
         Matrix jamahostHL=new Matrix(hostHL);
         Matrix jamahostHH=new Matrix(hostHH);
         Matrix jamahostLH=new Matrix(hostLH);
         Matrix jamahostLL=new Matrix(hostLL);
         
         Matrix jamawaterHL=new Matrix(waterHL);
         Matrix jamawaterHH=new Matrix(waterHH);
         Matrix jamawaterLH=new Matrix(waterLH);
         Matrix jamawaterLL=new Matrix(waterLL);
         
         SingularValueDecomposition svdhostHL = jamahostHL .svd();
         SingularValueDecomposition svdhostLH = jamahostLH.svd();
         SingularValueDecomposition svdhostHH = jamahostHH .svd();
         SingularValueDecomposition svdhostLL = jamahostLL.svd();
         
         SingularValueDecomposition svdwaterHL = jamawaterHL .svd();
         SingularValueDecomposition svdwaterLH = jamawaterLH.svd();
         SingularValueDecomposition svdwaterHH = jamawaterHH .svd();
         SingularValueDecomposition svdwaterLL = jamawaterLL.svd();
         
         Matrix S_hostHL=svdhostHL.getS();
         Matrix S_hostLH=svdhostLH.getS();
         Matrix S_hostHH=svdhostHH.getS();
         Matrix S_hostLL=svdhostLL.getS();
         
         Matrix S_waterHL=svdwaterHL.getS();
         Matrix S_waterLH=svdwaterLH.getS();
         Matrix S_waterHH=svdwaterHH.getS();
         Matrix S_waterLL=svdwaterLL.getS();
         
         
         S_waterHL=S_waterHL.times(alpha);
         S_waterLH=S_waterLH.times(alpha);
         S_waterHH=S_waterHH.times(alpha);
         S_waterLL=S_waterLL.times(alpha);
        
         Matrix S_modiHL=S_hostHL.plus(S_waterHL);
         Matrix S_modiLH=S_hostLH.plus(S_waterLH);
         Matrix S_modiHH=S_hostHH.plus(S_waterHH);
         Matrix S_modiLL=S_hostLL.plus(S_waterLL);
         
         
         Matrix HLmodihalf=svdhostHL.getU().times(S_modiHL);
         Matrix HLmodifull=HLmodihalf.times(svdhostHL.getV().transpose());
         
         
         Matrix LHmodihalf=svdhostLH.getU().times(S_modiLH);
         Matrix LHmodifull=LHmodihalf.times(svdhostLH.getV().transpose());
         
         
         Matrix HHmodihalf=svdhostHH.getU().times(S_modiHH);
         Matrix HHmodifull=HHmodihalf.times(svdhostHH.getV().transpose());
         
         
         Matrix LLmodihalf=svdhostLL.getU().times(S_modiLL);
         Matrix LLmodifull=LLmodihalf.times(svdhostLL.getV().transpose());
         
         double[][]HLmodi=HLmodifull.getArray();
         double[][]HHmodi=HHmodifull.getArray();
         double[][]LHmodi=LHmodifull.getArray();
         double[][]LLmodi=LLmodifull.getArray();
         
         
    
         
                    double [][]hostmodiHL=dct.IDCT2(HLmodi);
                    double [][]hostmodiHH=dct.IDCT2(HHmodi);
                    double [][]hostmodiLH=dct.IDCT2(LHmodi);
                    double [][]hostmodiLL=dct.IDCT2(LLmodi);
         
                    
                    
         double newhost[][]=obj.getoriginal(hostmodiLL, hostmodiHL, hostmodiLH, hostmodiHH);
         
         
         
                    
         newhost=dwt.inversewavlet(newhost);
         
         double mse=parameters.mse(hostgrayoriginal, newhost);
         
         double psnr=10*log10((255*255)/mse);
         
                    
        int ff=0;
           BufferedImage image2 = new BufferedImage(newhost.length, newhost[0].length, BufferedImage.TYPE_INT_RGB);
       for(int i=0; i<newhost.length; i++) {
          
        for(int j=0; j<newhost[0].length; j++) {
            int a = (int)newhost[i][j];
            int b=  (int)newhost[i][j];
            int c=  (int)newhost[i][j];
            if(a>255)
            {   
                a=255;
            
            }
            if(a<0)
                a=0;
            if(b>255)
                b=255;
            if(b<0)
                b=0;
            if(c>255)
                c=255;
            if(c<0)
                c=0;
            Color newColor = new Color(a,b,c);
            image2.setRGB(i,j,newColor.getRGB());
            
        }
    }
   File  output1 = new File("C:\\Users\\kush\\Documents\\Aaatesting\\watermarked "+hostname+" with "+watername+" psnr="+psnr+" mse="+mse+".jpg");
    ImageIO.write(image2, "jpg", output1);
    
    
    
    
    
    for(int i=0; i<hostgrayoriginal.length; i++) {
          
        for(int j=0; j<hostgrayoriginal[0].length; j++) {
            int a = (int)hostgrayoriginal[i][j];
            int b=  (int)hostgrayoriginal[i][j];
            int c=  (int)hostgrayoriginal[i][j];
            if(a>255)
            {   
                a=255;
            
            }
            if(a<0)
                a=0;
            if(b>255)
                b=255;
            if(b<0)
                b=0;
            if(c>255)
                c=255;
            if(c<0)
                c=0;
            Color newColor = new Color(a,b,c);
            image2.setRGB(i,j,newColor.getRGB());
            
        }
    }
     output1 = new File("C:\\Users\\kush\\Documents\\Aaatesting\\"+hostname+"grayscale.jpg");
    ImageIO.write(image2, "jpg", output1);
       
    long endTime = System.nanoTime();

        long duration = (endTime - startTime)/1000000000;
        
        System.out.println(" hello "+duration+" seconds lagyo embed garna");
    JOptionPane.showMessageDialog(null,"The waterwater has been embedded with a MSE of "+mse+" and a PSNR of "+psnr);

    
// throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    
     public static double[][] makeGray(BufferedImage img)
{      double image[][]=new double[img.getWidth()][img.getHeight()];
    for (int x = 0; x < img.getWidth(); ++x)
    {
    for (int y = 0; y < img.getHeight(); ++y)
    {
        int rgb = img.getRGB(x, y);
        int r = (rgb >> 16) & 0xFF;
        int g = (rgb >> 8) & 0xFF;
        int b = (rgb & 0xFF);

        int grayLevel = (int) (0.2126*r + 0.7152*g + 0.0722*b);
       
        image[x][y]=grayLevel;
    }
    }
    
        return image;
}
     
     
    
     public static double[][] getRed(BufferedImage img)
{      double image[][]=new double[img.getWidth()][img.getHeight()];
    for (int x = 0; x < img.getWidth(); ++x)
    {
    for (int y = 0; y < img.getHeight(); ++y)
    {
        int rgb = img.getRGB(x, y);
        int r = (rgb >> 16) & 0xFF;
        //int g = (rgb >> 8) & 0xFF;
        //int b = (rgb & 0xFF);

        //int grayLevel = (int) (0.2126*r + 0.7152*g + 0.0722*b);
        //int gray = (grayLevel << 16) + (grayLevel << 8) + grayLevel; 
        //img.setRGB(x, y, gray);
        image[x][y]=r;
    }
    }
    
        return image;
}
     
          public static double[][] getGreen(BufferedImage img)
{      double image[][]=new double[img.getWidth()][img.getHeight()];
    for (int x = 0; x < img.getWidth(); ++x)
    {
    for (int y = 0; y < img.getHeight(); ++y)
    {
        int rgb = img.getRGB(x, y);
        //int r = (rgb >> 16) & 0xFF;
        int g = (rgb >> 8) & 0xFF;
        //int b = (rgb & 0xFF);

        //int grayLevel = (int) (0.2126*r + 0.7152*g + 0.0722*b);
        //int gray = (grayLevel << 16) + (grayLevel << 8) + grayLevel; 
        //img.setRGB(x, y, gray);
        image[x][y]=g;
    }
    }
    
        return image;
}
     
     
     
     
          public static double[][] getBlue(BufferedImage img)
{      double image[][]=new double[img.getWidth()][img.getHeight()];
    for (int x = 0; x < img.getWidth(); ++x)
    {
    for (int y = 0; y < img.getHeight(); ++y)
    {
        int rgb = img.getRGB(x, y);
        //int r = (rgb >> 16) & 0xFF;
        //int g = (rgb >> 8) & 0xFF;
        int b = (rgb & 0xFF);

        //int grayLevel = (int) (0.2126*r + 0.7152*g + 0.0722*b);
        //int gray = (grayLevel << 16) + (grayLevel << 8) + grayLevel; 
        //img.setRGB(x, y, gray);
        image[x][y]=b;
    }
    }
    
        return image;
}
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
    
}
